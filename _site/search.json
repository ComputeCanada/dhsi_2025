[
  {
    "objectID": "wednesday/index.html",
    "href": "wednesday/index.html",
    "title": "Python for the humanities",
    "section": "",
    "text": "Time:\n9am–noon\nInstructor:\nTannia Chevez (ACENET)\nLive notes:\nEtherpad\nMaterial:\nSlides\nTopic:\nWe will gather internet data using APIs."
  },
  {
    "objectID": "wednesday/index.html#api-querying",
    "href": "wednesday/index.html#api-querying",
    "title": "Python for the humanities",
    "section": "",
    "text": "Time:\n9am–noon\nInstructor:\nTannia Chevez (ACENET)\nLive notes:\nEtherpad\nMaterial:\nSlides\nTopic:\nWe will gather internet data using APIs."
  },
  {
    "objectID": "wednesday/index.html#webscraping-with-ai",
    "href": "wednesday/index.html#webscraping-with-ai",
    "title": "Python for the humanities",
    "section": "Webscraping with AI",
    "text": "Webscraping with AI\n\nTime:\n1pm–4pm\nInstructor:\nMarie-Hélène Burle (Simon Fraser University)\nLive notes:\nEtherpad\nMaterial:\nWebsite\nTopic:\nYesterday we saw how useful LLMs can be to write simple snippets of code and learn a new programming language. Today, we will try to do something a lot more complex with the help of an LLM: write a program to scrape a website."
  },
  {
    "objectID": "tuesday/day2_morning.html",
    "href": "tuesday/day2_morning.html",
    "title": "Introductory Programming with Python",
    "section": "",
    "text": "Before we jump into analyzing data, let’s talk about one of the most powerful tools in programming: variables. Think of a variable like a storage box where you can put information that you might want to use later. This is how we make computers remember things for us!\nLet’s start with something simple. Imagine using Python like a calculator. You can do quick math, like this:\n\n#your code goes here\n\nThis is very handy, but let’s be honest, it’s not very exciting. What makes programming powerful is the ability to store this result or any other data, and use it again whenever we need it. That’s where variables come in.\n\n\nA variable is a name that refers to a value. In the previous example, we saw that we can use Python as an advanced calculator. However, the results of these computations are lost after we perform our operations. If we want to save and reuse any value in a code, we need to save these computations in a place in computer memory to be able to access it in the future.\nVariables are names that we associate with a memory location in computers. As such variables are not values themselves but they point to a memory location where the actual values are stored.\n\n#your code goes here\n\nNow, Python will remember that weight_kg equals 60. Instead of doing the math all over again or writing the number repeatedly, we just use weight_kg whenever we need it.\nA Few Rules for Naming Variables: - You can use letters, digits, and **underscores (_), but the name can’t** start with a digit. - Variable names are case-sensitive, so weight and Weight are two different things.\nFor example: - weight0 is valid, but 0weight isn’t. - weight_kg is different from Weight_kg.\n\n\n\nPython can work with different types of data. Three of the most common types are:\n\nIntegers (whole numbers like 1, 2, 100)\nFloating point numbers (numbers with decimals like 2.5, 60.3)\nStrings (text like “Hello”, “001”)\nBooleans (True or False)\n\nFor example, let’s say we want to store a patient’s weight. If the weight is exactly 60 kilograms, we can use an integer:\n\n#your code goes here\n\nBut if we want to be more precise, like 60.3 kilograms, we can use a floating point number:\n\n#your code goes here\n\nHere, weight_kg is a variable that stores a decimal number, or a float. It could represent any weight in kg measurement, which we might later use for calculations or comparisons.\nWe can also store text:\n\n#your code goes here\n\nStrings can store text data, which can be useful for labeling or adding metadata.\nAnd lastly, we have booleans, which are used to represent true or false values. They are helpful in logical operations or conditions:\n\n#your code goes here\n\nWith this variable, we could decide whether to apply certain calculations or adjustments based on the height. It can help us write cleaner, more conditional code."
  },
  {
    "objectID": "tuesday/day2_morning.html#variables",
    "href": "tuesday/day2_morning.html#variables",
    "title": "Introductory Programming with Python",
    "section": "",
    "text": "Before we jump into analyzing data, let’s talk about one of the most powerful tools in programming: variables. Think of a variable like a storage box where you can put information that you might want to use later. This is how we make computers remember things for us!\nLet’s start with something simple. Imagine using Python like a calculator. You can do quick math, like this:\n\n#your code goes here\n\nThis is very handy, but let’s be honest, it’s not very exciting. What makes programming powerful is the ability to store this result or any other data, and use it again whenever we need it. That’s where variables come in.\n\n\nA variable is a name that refers to a value. In the previous example, we saw that we can use Python as an advanced calculator. However, the results of these computations are lost after we perform our operations. If we want to save and reuse any value in a code, we need to save these computations in a place in computer memory to be able to access it in the future.\nVariables are names that we associate with a memory location in computers. As such variables are not values themselves but they point to a memory location where the actual values are stored.\n\n#your code goes here\n\nNow, Python will remember that weight_kg equals 60. Instead of doing the math all over again or writing the number repeatedly, we just use weight_kg whenever we need it.\nA Few Rules for Naming Variables: - You can use letters, digits, and **underscores (_), but the name can’t** start with a digit. - Variable names are case-sensitive, so weight and Weight are two different things.\nFor example: - weight0 is valid, but 0weight isn’t. - weight_kg is different from Weight_kg.\n\n\n\nPython can work with different types of data. Three of the most common types are:\n\nIntegers (whole numbers like 1, 2, 100)\nFloating point numbers (numbers with decimals like 2.5, 60.3)\nStrings (text like “Hello”, “001”)\nBooleans (True or False)\n\nFor example, let’s say we want to store a patient’s weight. If the weight is exactly 60 kilograms, we can use an integer:\n\n#your code goes here\n\nBut if we want to be more precise, like 60.3 kilograms, we can use a floating point number:\n\n#your code goes here\n\nHere, weight_kg is a variable that stores a decimal number, or a float. It could represent any weight in kg measurement, which we might later use for calculations or comparisons.\nWe can also store text:\n\n#your code goes here\n\nStrings can store text data, which can be useful for labeling or adding metadata.\nAnd lastly, we have booleans, which are used to represent true or false values. They are helpful in logical operations or conditions:\n\n#your code goes here\n\nWith this variable, we could decide whether to apply certain calculations or adjustments based on the height. It can help us write cleaner, more conditional code."
  },
  {
    "objectID": "tuesday/day2_morning.html#basic-operations-with-variables",
    "href": "tuesday/day2_morning.html#basic-operations-with-variables",
    "title": "Introductory Programming with Python",
    "section": "Basic Operations with Variables",
    "text": "Basic Operations with Variables\n\nWorking with Numbers: Integers and Floats\nAddition is one of the simplest operations. If you want to increase a value, you just add to it. For example, if you have a population measurement of 20000 and want to add 5000 more, Python gives you a new population number of 25000 like this:\n\n#your code goes here\n\nOther operations are just as simple. If you want to double a temperature value, you multiply it by 2 like this:\n\n#your code goes here\n\nDivision also works the same way: dividing 20000 by 100 gives 200.0 like this:\n\n#your code goes here\n\nPython can also handle exponents, like squaring numbers. If you want to find what 20000 times 20000 is, you can get it this way:\n\n#your code goes here\n\nThis is useful for calculating things like squared distances or other exponential relationships.\n### Exercise 1: You are studying urban growth in a geography class. City A had a population of 1,500,000 people in the year 2000, and it grew to 2,100,000 people by the year 2020.\nYour task is to write a Python program that: - Stores the population values in variables. - Calculates how much the population has grown. - Displays the result using print().\n\n#your code goes here\n\n\n\nWorking with Strings\nWith strings, one common thing we do is combine them, known as concatenation. Imagine you have two words, first name and last name, like “John” and “Doe”, and you want to make them into one full name: “John Doe.” You do this by placing them side by side with a plus sign between them, and Python combines them into one.\n\n#your code goes here\n\nAnother thing you can do with strings is repeat them. For instance, if you have the word “hello,” you could repeat it multiple times, like “hello hello hello” In Python, you simply tell it to multiply the word by the number of times you want it to appear like this:\n\n#your code goes here\n\n\n\nWorking with Booleans\nBooleans in Python are very straightforward: they represent only two options, True or False. They’re useful when you’re asking questions or checking if something meets certain conditions.\nFor example, let’s say you want to check if a town’s population is above a certain number. Imagine the town has a population of 20,000 people, and you want to know if it’s larger than 10,000:\n\n#your code goes here\n\nWe can also ask Python to check multiple conditions at once. Maybe you want to know if a town has both a large population (over 10,000 people) and a low unemployment rate (under 5%). You can combine these two questions into one. If both are true, Python returns True; if either one isn’t, it returns False.\n\n#your code goes here\n\n\n\nMixing Types Together\nSometimes, Python lets us mix different types in ways that make sense. For example, in Python, True is treated as 1 and False as 0. So if you’re working with a number and a condition, Python might add 1 if the condition is True, or add nothing if it’s False. This can be handy for quick adjustments, like slightly increasing a value if a condition is met.\n\n#your code goes here\n\nThese simple operations let you do quite a bit in Python. With strings, you can create descriptive phrases; with numbers, you can add, multiply, and do more complex math; with booleans, you can check conditions and make decisions. This flexibility is what makes Python both powerful and beginner-friendly—it’s easy to write code that mimics real-world problem-solving, step by step."
  },
  {
    "objectID": "tuesday/day2_morning.html#data-structures",
    "href": "tuesday/day2_morning.html#data-structures",
    "title": "Introductory Programming with Python",
    "section": "Data Structures",
    "text": "Data Structures\nData structures are essential for organizing and managing data in programming. In Python, we have several types of data structures, but three of the most commonly used ones are lists, tuples, and dictionaries. Each of these has unique characteristics and uses that make them suitable for different tasks.\n\nLists\nA list in Python is a collection of items that can be modified. This means you can add, remove, or change items in a list as needed. Lists are defined using square brackets []:\n\n#your code goes here  \n\nIn this example, we have a list called grades that stores test scores from different students.\n\nUsing Lists:\n1. Accessing Lists: Each item in a list has a position called an index, starting from 0. You can access any item using its index:\n\n#your code goes here\n\n2. Modifying Items: Lists are mutable, meaning you can change their contents:\n\n#your code goes here\n\n3. Adding Items: You can add new items to the end of a list using the append() method:\n\n#your code goes here\n\n4. Removing Items: You can remove items from a list using the remove() method or the pop() method:\n\n#your code goes here\n\n\n#your code goes here\n\nConsider a scenario where you are recording student test scores for a class. You can store these scores in a list. As new test results come in, you can easily update the list by adding new scores or modifying existing ones.\n\n\n\nExercise 2\n\nCreate a list named philosophers that contains these names as strings: “Plato”, “Aristotle”, “Confucius”, and “Socrates”.\nAdd the philosopher “Descartes” to the end of the list.\nRemove “Confucius” from the list.\nPrint the updated list to see the changes.\n\n\n#your code goes here\n\n\n\nTuples\nA tuple is a collection of items, similar to a list, but it is immutable. This means that once a tuple is created, it cannot be changed. Tuples are defined using parentheses ().\n\n#your code goes here\n\nThis tuple represents the geographic coordinates of a specific location.\n\nUsing Tuples:\n1. Accessing Items: Just like lists, you can access items in a tuple using their index:\n\n#your code goes here\n\n\n#your code goes here\n\n2. Benefits of Immutability: Since tuples cannot be changed, they are useful for storing fixed data that should not be altered. This can help prevent accidental changes to important values.\nIn oceanography, you might want to store the coordinates of a specific research station. Since these coordinates are fixed and won’t change, a tuple is the ideal choice. If you need to reference these coordinates later in your code, you can do so confidently, knowing they will not change.\n\n\n\nDictionaries\nA dictionary in Python is a collection of key-value pairs, similar to how a real dictionary has words (keys) and their meanings (values). Each key in a dictionary must be unique, and you can use it to access its corresponding value. Dictionaries are defined using curly braces {}.\n\n#your code goes here\n\nIn this example, we have a dictionary called student_data that stores various pieces of information about a student’s academic details.\n\nUsing Dictionaries:\n1. Accessing Values: You can retrieve a value using its corresponding key.\n\n#your code goes here \n\n2. Adding or Modifying Values: You can easily add new key-value pairs or modify existing ones:\n\n#Modify Existing one\n#your code goes here \n\n\n#Adding new key-value pair\n#your code goes here \n\n3. Removing Key-Value Pairs: You can remove a key-value pair using the del statement:\n\n#your code goes here\n\n\n\n\nExercise 3\n\nCreate a dictionary named countries with these key-value pairs:\n\n\n“United States” : “English”\n“Mexico” : “Spanish”\n“France” : “French”\n“Canada” : “English and French”\n\n\nAdd a new entry to the dictionary: “Brazil” : “Portuguese”\nRemove the key “France” and its value using the del statement.\nPrint the updated dictionary every time.\n\n\n#your code goes here\n\n\nChoosing the Right Data Structure\nSelecting the appropriate data structure is crucial. Here’s a quick guide:\n\nUse Lists when you need to store a collection of items that you might want to change or add to, like student grades over multiple subjects or assignments.\nUse Tuples for fixed data points that won’t change, such as geographic coordinates of research locations.\nUse Dictionaries when you need to associate related information together, such as all academic details for a specific student.\n\nChoosing the right data structure will make your data management more efficient and your code easier to understand."
  },
  {
    "objectID": "tuesday/day2_morning.html#control-structures",
    "href": "tuesday/day2_morning.html#control-structures",
    "title": "Introductory Programming with Python",
    "section": "Control Structures",
    "text": "Control Structures\nControl structures are essential programming constructs that allow us to dictate the flow of our program. In Python, the most commonly used control structures include loops (for and while) and conditionals (if and else). These structures enable us to repeat actions, make decisions based on conditions, and manage how we process data.\n\nConditionals\nConditionals allow us to execute certain blocks of code based on specific conditions. This means that our program can make decisions and act differently depending on the situation. The most common conditional statements in Python are if, elif, and else.\n\nBasic Structure of Conditionals:\nHere’s a simple structure for using conditionals:\nif condition: # Code to execute if the condition is true elif another_condition: # Code to execute if the first condition is false and this one is true else: # Code to execute if both conditions are false\n\n\nComparison Operators\nComparison operators allow us to compare two values. Here are the most commonly used comparison operators in Python:\n==: Equal to (checks if two values are the same) !=: Not equal to (checks if two values are different) &gt;: Greater than (checks if the left value is larger than the right) &lt;: Less than (checks if the left value is smaller than the right) &gt;=: Greater than or equal to (checks if the left value is larger than or equal to the right) &lt;=: Less than or equal to (checks if the left value is smaller than or equal to the right)\nLet’s say we want to categorize towns based on their population size:\n\n#your code goes here\n\nIn this example:\n\nIf the population is less than 5,000, it prints “Small town.”\nIf the population is between 5,000 and 20,000 (inclusive), it prints “Medium-sized town.”\nIf the population is over 20,000, it prints “Large town.”\n\n\n\nLogical Operators\nLogical operators allow us to combine multiple conditions. The most commonly used logical operators are:\n\nand: Returns True if both conditions are true.\nor: Returns True if at least one condition is true.\nnot: Reverses the truth value (makes True become False and vice versa).\n\nLet’s say we want to check if someone’s annual income falls within the middle-income bracket:\n\n#your code goes here\n\nIn this example:\n\nThe condition annual_income &gt;= 30000 and annual_income &lt;= 70000 checks if the income is between 30,000 and 70,000 inclusive.\nIf both are true, it prints “Middle-income bracket.”\n\n\n\n\nLoops\nLoops allow us to repeat a block of code multiple times. This is especially useful when we have to process a collection of items, like a list of temperature readings or salinity measurements. The two primary types of loops in Python are for loops and while loops.\n\nFor Loops:\nA for loop is used to iterate over a sequence (like a list or a tuple). Here’s the basic structure:\nfor item in sequence: # Code to execute for each item\nLet’s say we want to print out each survey response score from a list:\n\n#your code goes here\n\nIn this example, the loop goes through each item in the survey_scores list and prints it.\nFor loops are useful for analyzing data, such as calculating the average monthly income from several months:\n\nmonthly_incomes = [3000, 3200, 3100, 2900, 4000, 3500, 2500, 2900, 3050, 3200, 3500, 2950]\n#your code goes here\n\nIn this case, the loop adds up all the monthly incomes and then finds the average by dividing by the number of months.\n\n\n\nExercise 4\n\nYou are given a list named populations that contains population numbers (in thousands).\nUse a for loop to add all the population numbers together and store the total in a variable called total_population.\nCalculate the average population by dividing the total population.\nPrint the average population rounded to the nearest whole number.\n\n\npopulations = [2731, 631, 1135, 934, 1705]\n\n#your code goes here\n\n\nWhile Loops\nA while loop continues to execute as long as a specified condition is true. The basic structure looks like this:\nwhile condition: # Code to execute while the condition is true\nLet’s say we want to keep recording monthly expenses until we have data for five months:\n\n#your code goes here\n\nIn this example, the loop keeps asking for monthly expenses until it has collected five amounts.\nWhile loops are useful for continuous data collection, like tracking monthly donations until reaching a target amount:\n\n#your code goes here\n\n\n\n\nCombining Loops and Conditionals\nOften, we will need to use both loops and conditionals together to process data effectively. For example, you might want to analyze temperature readings and categorize them within a loop.\nLet’s categorize a list of temperature readings as “Cold,” “Warm,” or “Hot”:\n\n#your code goes here\n\nIn this example, the loop goes through each temperature reading, and the conditional statements categorize each temperature accordingly.\nNow, let’s say we want to use a loop to analyze data stored in a dictionary. We have a dictionary of historical events and the years they happened. Using a for loop, we can go through each event and year, and use a control structure like an if statement to check whether the event happened before or after 1900.\n\n#your code goes here\n\n\n\nExercise 5\nYou are given a dictionary of universities worldwide with their average graduation rates (in percentages):\nuniversities = { “Harvard University”: 98,\n\"University of Oxford\": 92,\n\n\"Stanford University\": 94,\n\n\"Massachusetts Institute of Technology (MIT)\": 92,\n\n\"University of Cambridge\": 93,\n\n\"University of Tokyo\": 70,\n\n\"University of Melbourne\": 79,\n\n\"University of Cape Town\": 68,\n\n\"University of São Paulo\": 65,\n\n\"National University of Singapore\": 80\n}\nTask:\n\nLoop through each university and its graduation rate.\nPrint the university name and its graduation rate.\nUse conditional statements to classify the graduation rate:\n\n90% or above: print “Excellent graduation rate”.\nBetween 75% and 89% (inclusive): print “Good graduation rate”.\nBelow 75%: print “Needs improvement”.\n\n\n\n#your code goes here"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#computer-programming",
    "href": "monday/wb_hss_prog_slides.html#computer-programming",
    "title": "Intro programming for the humanities",
    "section": "Computer programming",
    "text": "Computer programming\nProgramming (or coding) consists of writing a set of instructions (a program) for computers so that they perform a task\nThere are many programming languages—each with its own syntax—but the core concepts apply to all languages. For this course, we will use Python\nPrograms accept inputs (data) and produce outputs (transformed data)"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#important-considerations",
    "href": "monday/wb_hss_prog_slides.html#important-considerations",
    "title": "Intro programming for the humanities",
    "section": "Important considerations",
    "text": "Important considerations\n\nFree and open source software (FOSS) vs proprietary\nCompiled vs interpreted language (speed vs convenience)\nLanguage adapted to particular usage\nLanguage used in your field (colleagues, collaborators, literature)"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#downsides-of-proprietary-software",
    "href": "monday/wb_hss_prog_slides.html#downsides-of-proprietary-software",
    "title": "Intro programming for the humanities",
    "section": "Downsides of proprietary software",
    "text": "Downsides of proprietary software\n\nResearchers who do not have access to the tool cannot reproduce your methods\nOnce you leave academia, you may not have access to the tool anymore\nYour university may stop paying for a license\nYou may get locked-in\nProprietary tools are black boxes\nLong-term access is uncertain\nProprietary tools fall behind popular open-source tools\nProprietary tools often fail to address specialized edge cases needed in research"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#the-argument-for-foss",
    "href": "monday/wb_hss_prog_slides.html#the-argument-for-foss",
    "title": "Intro programming for the humanities",
    "section": "The argument for FOSS",
    "text": "The argument for FOSS\n\nEqual access to everyone, including poorer countries or organizations (it’s free!)\nOpen science\nTransparency\nThe whole community can contribute to and have a say about development\nYou an build specific capabilities for your edge cases\nGuarantied long term access\nNo risk of getting locked-in"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#compiled-languages",
    "href": "monday/wb_hss_prog_slides.html#compiled-languages",
    "title": "Intro programming for the humanities",
    "section": "Compiled languages",
    "text": "Compiled languages\nYou write code, compile it into machine code, then use this to process your data\n\nCompiled languages are fast. The two step process however makes prototyping less practical and these languages are hard to learn and debug\n\nExamples of compiled languages include C, C++, Fortran, Go, Haskell"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#interpreted-languages",
    "href": "monday/wb_hss_prog_slides.html#interpreted-languages",
    "title": "Intro programming for the humanities",
    "section": "Interpreted languages",
    "text": "Interpreted languages\nInterpreted languages are executed directly\n\nYou get direct feed-back, making it easier to prototype. Interpreted languages are easy to learn and debug, but they are much slower\n\nExamples of interpreted languages include R, Python, Perl, and JavaScript"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#python",
    "href": "monday/wb_hss_prog_slides.html#python",
    "title": "Intro programming for the humanities",
    "section": "Python",
    "text": "Python\nPython is free and open-source, interpreted, and general-purpose\nIt was created by Dutch programmer Guido van Rossum in the 80s, with a launch in 1989\nThe PYPL PopularitY of Programming Language index is based on the number of tutorial searches in Google. Python has been going up steadily, reaching the first position in 2018. It is also ahead in other indices and is the language used by most of the deep learning community\nThis doesn’t mean that Python is better than other languages, but it means that there are a lot of resources and a large collection of external packages"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#text-editor-to-write-scripts",
    "href": "monday/wb_hss_prog_slides.html#text-editor-to-write-scripts",
    "title": "Intro programming for the humanities",
    "section": "Text editor to write scripts",
    "text": "Text editor to write scripts\nA text editor is not the same as a word processor such as Microsoft Office Word. Word documents are not plain text documents: they contain a lot of hidden formatting and are actually a collection of files. This is not what you want to write scripts\nExamples of good text editors (free and open source):\n\nEmacs\nVisual Studio Code\nVim"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#optional-an-ide",
    "href": "monday/wb_hss_prog_slides.html#optional-an-ide",
    "title": "Intro programming for the humanities",
    "section": "Optional: an IDE",
    "text": "Optional: an IDE\nIntegrated development environments (IDEs) are software that make running a language more friendly by adding functionality and convenience tools, usually within a graphical user interface (GUI)\nA popular IDE for Python is JupyterLab"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#debugging-and-profiling-tools",
    "href": "monday/wb_hss_prog_slides.html#debugging-and-profiling-tools",
    "title": "Intro programming for the humanities",
    "section": "Debugging and profiling tools",
    "text": "Debugging and profiling tools\nSome languages come with debugging tools that make it easier to find problems in the code\nProfilers allow you to spot bottlenecks in the execution of your code\nBenchmarking tools allow you to compare several versions of code to find which is faster"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#hardware",
    "href": "monday/wb_hss_prog_slides.html#hardware",
    "title": "Intro programming for the humanities",
    "section": "Hardware",
    "text": "Hardware\nPython is great in many respects, but it is not a fast language\nMany libraries for Python are written in faster compiled languages (e.g. C, C++, Fortran)\nTo speed things up more, some code or sections of code can be run in parallel (instead of serially). To do this though, you need more hardware\nYou can run code using multiple CPUs (central processing unit). Some code can be accelerated using GPUs (graphical processing unit)\nFor very large scale projects such as very large simulations, deep learning, or big data projects, you can use supercomputers"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#python-shell",
    "href": "monday/wb_hss_prog_slides.html#python-shell",
    "title": "Intro programming for the humanities",
    "section": "Python shell",
    "text": "Python shell\nThe simplest way to use Python is to type commands directly in the Python shell. This sends commands directly to the interpreter\nThe Python shell has a prompt that looks like this:\n&gt;&gt;&gt;"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#ipython",
    "href": "monday/wb_hss_prog_slides.html#ipython",
    "title": "Intro programming for the humanities",
    "section": "IPython",
    "text": "IPython\nIPython is an improved shell with better performance and more functionality (e.g. colour-coding, magic commands)\nThe prompt looks like:\nIn [x]:\n\nx is the command number (e.g. for your first command, it will show In [1]:"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#jupyter",
    "href": "monday/wb_hss_prog_slides.html#jupyter",
    "title": "Intro programming for the humanities",
    "section": "Jupyter",
    "text": "Jupyter\nThe IPython shell was integrated into a fancy interface, the Jupyter notebook. This later lead to a fully fledged IDE (integrated development environment) called JupyterLab which contains notebooks, a command line, a file explorer, and other functionality\n\nEven though JupyterLab runs in your browser, it does not use the internet: it is all run locally on your machine (browsers are software that are great at displaying HTML files, so we use them to access the web, but they can also display files from your computer)"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#other-ides",
    "href": "monday/wb_hss_prog_slides.html#other-ides",
    "title": "Intro programming for the humanities",
    "section": "Other IDEs",
    "text": "Other IDEs\nJupyter has probably become the most popular IDE, but it is possible to run Python in other IDE such as Emacs"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#python-script",
    "href": "monday/wb_hss_prog_slides.html#python-script",
    "title": "Intro programming for the humanities",
    "section": "Python script",
    "text": "Python script\nYou can write your Python code in a text file with a .py extension and run the script in your terminal with:\npython script.py\nThis will execute the code non-interactively"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#packages",
    "href": "monday/wb_hss_prog_slides.html#packages",
    "title": "Intro programming for the humanities",
    "section": "Packages",
    "text": "Packages\nMany languages can have their functionality expanded by the installation of packages developed by the open source community. The potential is unlimited\nMany languages come with their own package manager\nIn Python, popular package managers include pip, Conda, and the newer much faster uv"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#syntax",
    "href": "monday/wb_hss_prog_slides.html#syntax",
    "title": "Intro programming for the humanities",
    "section": "Syntax",
    "text": "Syntax\nEach language uses its own syntax\n\nExample:\nIn Python, the tab (equal to four spaces by default) has meaning, while in R, it doesn’t (it only makes it easier for people to read code)"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#data-types",
    "href": "monday/wb_hss_prog_slides.html#data-types",
    "title": "Intro programming for the humanities",
    "section": "Data types",
    "text": "Data types\nEach language contains various data types such as integers, floating-point numbers (decimals), strings (series of characters), Booleans (true/false), etc.\n\nPython examples:\n\n\ntype(5)\n\nint\n\n\n\ntype(5.0)\n\nfloat\n\n\n\ntype(\"This is a string\")\n\nstr\n\n\n\ntype(True)\n\nbool"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#variables",
    "href": "monday/wb_hss_prog_slides.html#variables",
    "title": "Intro programming for the humanities",
    "section": "Variables",
    "text": "Variables\nValues can be assigned to names to create variables\n\nPython example\n\n\na = 3\n\na is now a variable containing the value 3:\n\nprint(a)\n\n3\n\n\n\na * 2\n\n6"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#data-structures",
    "href": "monday/wb_hss_prog_slides.html#data-structures",
    "title": "Intro programming for the humanities",
    "section": "Data structures",
    "text": "Data structures\nA data structure is a collection of values\n\nPython examples:\n\n\ntype([0, 5, \"something\"])\n\nlist\n\n\n\ntype((3, 5, \"something\"))\n\ntuple\n\n\n\ntype({0, 2, 6})\n\nset\n\n\nEach type of structure has its own characteristics (necessarily homogeneous or not, mutable or not, ordered or not, etc.). This gives several data storage options, each best in different situations"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#functions",
    "href": "monday/wb_hss_prog_slides.html#functions",
    "title": "Intro programming for the humanities",
    "section": "Functions",
    "text": "Functions\nFunctions are snippets of code that accomplish a specific task\nBuilt-in functions come with the language and are readily available. Other functions become available once a particular module or package is loaded. Finally, the user can definite their own functions\nSome functions take arguments\n\nPython examples:\n\n\nmax([3, 5, 2])\n\n5\n\n\n\ndef hello():\n    print(\"Hello everyone!\")\n\nhello()\n\nHello everyone!"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#control-flow",
    "href": "monday/wb_hss_prog_slides.html#control-flow",
    "title": "Intro programming for the humanities",
    "section": "Control flow",
    "text": "Control flow\nCommands are normally run sequentially, from top to bottom, but it is possible to alter the flow of execution by creating repeats (loops) or conditional executions\n\nPython examples:\n\n\nfor i in range(3):\n    print(i)\n\n0\n1\n2\n\n\n\nx = -3\n\nif x &gt; 0:\n    print(x + 2)\nelse:\n    print(x * 3)\n\n-9"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#internal-documentation",
    "href": "monday/wb_hss_prog_slides.html#internal-documentation",
    "title": "Intro programming for the humanities",
    "section": "Internal documentation",
    "text": "Internal documentation\nMost languages come with their internal documentation\n\nExample with Python:\n\nhelp(sum)\nHelp on built-in function sum in module builtins:\n\nsum(iterable, /, start=0)\n    Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\n    When the iterable is empty, return the start value.\n    This function is intended specifically for use with numeric values and may\n    reject non-numeric types."
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#the-internet",
    "href": "monday/wb_hss_prog_slides.html#the-internet",
    "title": "Intro programming for the humanities",
    "section": "The internet",
    "text": "The internet\nGoogle is often your best bet, but you need to know the vocabulary in order to ask questions\nStack Overflow is a fantastic community question & answer website"
  },
  {
    "objectID": "monday/wb_hss_prog_slides.html#large-language-models-llms",
    "href": "monday/wb_hss_prog_slides.html#large-language-models-llms",
    "title": "Intro programming for the humanities",
    "section": "Large language models (LLMs)",
    "text": "Large language models (LLMs)\nOver the past few years, LLMs have become increasingly performant at coding\nPeople use them in different ways:\n\nAsk questions (explain code, documentation)\nAuto-completion\nFirst code draft\nDebugging\nVibe coding\n\nIn this course, I will show you how they can help you write code"
  },
  {
    "objectID": "monday/day1_afternoon.html",
    "href": "monday/day1_afternoon.html",
    "title": "Introduction to Python for Digital Humanities",
    "section": "",
    "text": "The Digital Humanities (DH) is an interdisciplinary field that brings together computational tools and methods with traditional disciplines in the humanities, such as history, literature, art history, linguistics, philosophy, and cultural studies. As the volume of digital cultural content grows—such as digitized manuscripts, historical records, social media posts, and multimedia archives—the need to process, analyze, and interpret these materials using digital tools becomes increasingly important."
  },
  {
    "objectID": "monday/day1_afternoon.html#introduction-to-jupyterlab",
    "href": "monday/day1_afternoon.html#introduction-to-jupyterlab",
    "title": "Introduction to Python for Digital Humanities",
    "section": "Introduction to JupyterLab",
    "text": "Introduction to JupyterLab\nJupyterLab is an interactive computing environment that allows you to create and share documents containing live code, equations, visualizations, and narrative text. It is commonly used in data science, research, and education, especially for projects in the Digital Humanities, because of its flexibility and ease of use. JupyterLab is essentially an upgrade of Jupyter Notebooks, providing a more modular and feature-rich interface.\n\nKey Features of JupyterLab:\n\nCode cells: These are cells where you write and execute code.\nMarkdown cells: These cells are used for explanatory text, formatted using Markdown.\nRich outputs: Visualizations, graphs, images, and other media can be displayed inline within the notebook.\nFile management: JupyterLab has a built-in file browser that allows you to organize and manage notebooks, text files, images, and other resources.\n\n\n\nHow to Add Cells in JupyterLab\nIn JupyterLab, cells are the building blocks of your notebook. You can add, delete, and modify cells to create a flow between code execution and explanatory text.\n\nAdding Cells:\n\nVia Menu: Navigate to the top menu: Insert → Insert Cell Below or Insert → Insert Cell Above.\nKeyboard Shortcuts: Press B to insert a cell below the current one or A to insert a cell above.\nClicking Buttons: Use the “+” button in the toolbar to insert new cells.\n\n\n\nSwitching Between Cell Types (Code and Markdown):\nYou can switch between code cells and markdown cells to organize your content effectively.\n\nTo Change a Cell Type to Code:\n\n\nSelect the cell and press Y.\nAlternatively, click on the Cell Type dropdown menu in the toolbar (where “Markdown” is by default) and select Code.\n\n\nTo Change a Cell Type to Markdown:\n\n\nSelect the cell and press M.\nAlternatively, use the Cell Type dropdown and select Markdown.\n\nThis allows you to seamlessly switch between running code and writing descriptive text.\n\n\nRunning and Stopping Cells\nCells in JupyterLab can either be run (executed) or stopped, depending on whether you want to see the result of the code.\n\nRunning Cells: To execute a cell, you can:\n\n\nWindows/Linux: Press Shift + Enter to run the current cell and move to the next.\nMac: Press Shift + Enter to run the current cell and move to the next. You can also use command + Enter to run the cell and stay in that cell.\nAlternatively, click the Run button in the toolbar.\n\n\nStopping a Cell: If you want to stop the execution of a cell:\n\n\nNavigate to Kernel → Interrupt in the top menu or use the Stop button in the toolbar.\nAlternatively, use the keyboard shortcut I twice (press I quickly two times) to interrupt the current execution.\n\n\n\n\nThe Kernel in JupyterLab\nThe kernel is the engine behind your notebook, it runs your Python code and remembers what you’ve done.\nWhen you press Shift + Enter to run a cell, the kernel executes that code and gives you a result (a number, a list, a graph, etc.).\n\nUnderstanding [ ], [*], and [1] in Jupyter Cells\nEvery time you run a code cell, you’ll see a number appear inside square brackets next to the cell, like this:\n\n#Your code goes here\n\nHere’s what those brackets mean:\n[ ] — The cell has not been run yet.\n[*] — The code is currently running (kernel is busy).\n[1], [2], … — The number shows the order in which you ran the cells.\nFor example:\nIf you see [5] next to a cell, it means this was the fifth cell you ran.\nIf a cell is stuck on [*], it might be taking a long time or be stuck — you can stop it using Kernel → Interrupt.\n\n\nCommon Kernel Actions:\n\nRun code: Shift + Enter\nInterrupt kernel: Stop a running cell (especially useful if stuck on [*])\nRestart kernel: Clears everything the kernel remembers (variables, imports, etc.)\n\nUse Kernel → Restart if things get messy or confusing — then rerun your cells from the top to start fresh."
  },
  {
    "objectID": "monday/day1_afternoon.html#built-in-functions-and-documentation",
    "href": "monday/day1_afternoon.html#built-in-functions-and-documentation",
    "title": "Introduction to Python for Digital Humanities",
    "section": "Built-in Functions and Documentation",
    "text": "Built-in Functions and Documentation\nPython provides a wide range of built-in functions—these are standard, preloaded tools that help with common tasks. They require no additional libraries or installations and are available immediately when you run Python.\n\nWhat Are Built-in Functions?\nA built-in function is a function that is always available in Python. These are designed to simplify common programming tasks. For instance, rather than writing your own code to calculate the length of a string, you can use len().\nBuilt-in functions improve productivity and reduce the need for writing code from scratch for basic operations.\n\n\nCommon Built-in Functions and What They Do:\n\nprint(): Displays text or variable output.\nlen(): Returns the number of items in an object (string, list, etc.).\ntype(): Returns the data type of a variable (e.g., int, str).\nint(), float(), str(): Convert between data types.\nrange(): Produces a sequence of numbers, often used in loops.\nsum(): Adds numbers in a list or iterable.\nsorted(): Returns a new list containing all items from the iterable in ascending order.\nmax() / min(): Finds the largest or smallest value in a dataset.\n\n\n# Example 1: Basic text output\n#Your code goes here\n\n# Example 2: Working with a string\n#Your code goes here\n\n# Example 3: Check data type\n#Your code goes here\n\n# Example 4: Sorting a list\n#Your code goes here\n\n# Example 5: Using range and sum\n#Your code goes here\n\n\n\nExploring Python Documentation\nLearning how to explore the documentation is key to becoming self-sufficient in Python.\nPython provides tools for this: - help() function - The ? syntax in Jupyter Notebooks\n\n#Your code goes here\n\nThis gives detailed information about how to work with strings.\n\n#Your code goes here\n\nThis brings up a quick help popup describing the str class.\nYou can also combine help with other functions:\n\n#Your code goes here\n\nThis shows how the len() function works and what types it supports."
  },
  {
    "objectID": "monday/day1_afternoon.html#libraries-and-modules",
    "href": "monday/day1_afternoon.html#libraries-and-modules",
    "title": "Introduction to Python for Digital Humanities",
    "section": "Libraries and Modules",
    "text": "Libraries and Modules\nPython’s strength lies in its standard library and external packages—collections of modules that offer specialized functionality. A module is simply a file containing Python definitions and statements. A library is a collection of modules that can be imported and used in your programs.\n\nWhy Libraries Matter:\nThey save time and provide tested, optimized tools for: - Text processing - Data handling - Visualization - Machine learning - File and network operations\n\n\nImporting Modules\nTo use a module, you import it into your Python script:\n\n#Your code goes here\n\nYou can also import specific functions or classes:\n\n#Your code goes here\n\nOr give a library module an alias:\n\n#Your code goes here\n\n\n\nBuilt-in Python Libraries\nPython comes with a rich standard library — a collection of modules and packages that are bundled with Python itself. This means you don’t need to install anything extra to start using them. They’re always available whenever you run Python, making it super convenient to perform many common programming tasks right out of the box.\n\nrandom : Generate random numbers\nUseful for creating random data, games, simulations, or selecting random elements.\n\n#Your code goes here\n\n\n\ndatetime — Work with dates and times\nEasily get the current date/time or perform date calculations.\n\n#Your code goes here\n\n\n\nos — Interact with your computer’s operating system\nGet info about files, directories, environment variables, or execute system commands.\n\n#Your code goes here\n\n\n\n\nExternal Libraries\nWhile Python’s built-in libraries cover a lot, many advanced tasks require specialized tools, this is where external libraries come in. These are packages developed by the Python community (or companies) and shared through the Python Package Index (PyPI). You usually install them using the package manager pip.\n\nWhat Are External Libraries?\n\nThey extend Python’s capabilities beyond the standard library.\nProvide tools for data science, machine learning, web development, image processing, automation, and much more.\nThey often come with many modules and sub-packages bundled together, making them powerful libraries.\n\n\n\nInstalling External Libraries\nNormally, you install external libraries using the command line:\npip install library-name\nFor example:\npip install numpy pip install pandas pip install matplotlib\nMost popular external libraries used for data science and scientific computing come pre-installed in JupyterLab environments such as: - Anaconda distribution (a popular Python distribution for data science) - Cloud platforms like Google Colab - Many managed JupyterHub setups\nThis means when you open a notebook in JupyterLab, you can often import and use libraries like numpy, pandas, and matplotlib immediately, no extra installation required.\nLet’s see some examples of these libraries:\n\n\nnumpy — Fast numerical computing\nProvides powerful arrays and mathematical functions.\n\n#Your code goes here\n\n\n\npandas — Data manipulation and analysis\nMakes working with tabular data easy.\n\n#Your code goes here\n\n\n\nmatplotlib — Data visualization\nCreate charts and graphs.\n\n#Your code goes here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Coding Fundamentals for Humanists",
    "section": "",
    "text": "Software installation instructions\n\n\n\n\n\n\nMondayJune 2, 2025\n\n\n\n\nProgramming fundamentals\nIntroduction to the core concepts of programming languages\n\n\n\n\n\n\nTuesdayJune 3, 2025\n\n\n\n\nBasics of Python\nPython as an example of programming language\n\n\n\n\n\n\nWednesdayJune 4, 2025\n\n\n\n\nPython for the humanities\nExamples of use cases\n\n\n\n\n\n\nThursdayJune 5, 2025\n\n\n\n\nYour turn!\nQuery an API or scrape a website in teams\n\n\n\n\n\n\nFridayJune 6, 2025\n\n\n\n\nPresentations\nStress-free presentations of your results and what you learnt"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Coding Fundamentals for Humanists",
    "section": "",
    "text": "This workshop is part of the Digital Humanities Summer Institute (DHSI) 2025 event."
  },
  {
    "objectID": "about.html#instructors",
    "href": "about.html#instructors",
    "title": "About Coding Fundamentals for Humanists",
    "section": "Instructors",
    "text": "Instructors\n\n\n\n\n\n\nEvolutionary and behavioural ecologist by training, Software/Data Carpentry instructor, and open source advocate, Marie-Hélène Burle develops and delivers training for researchers on high-performance computing tools (R, Python, Julia, Git, Bash scripting, machine learning, parallel scientific programming, and HPC) for Simon Fraser University and the Digital Research Alliance of Canada.\n\n\n\n\n\n\n\n\n\n\n\n\nTannia Chevez joined ACENET in 2023 and is based in St. John’s. She has held positions as a research assistant in various departments, with responsibilities ranging from developing algorithms for an online animal sound repository, to crafting chemical composite films. She is proficient in Python, Java, and JavaScript. Her teaching experience includes a Leader Instructor at Brilliant Labs where she taught a range of digital topics, and a Digital Literacy Instructor for the Association for New Canadians."
  },
  {
    "objectID": "friday/index.html",
    "href": "friday/index.html",
    "title": "Presentations",
    "section": "",
    "text": "Time:\n9am–10:15am\nLive notes:\nEtherpad"
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Software installation instructions",
    "section": "",
    "text": "Python is a popular high-level programming language with applications in different fields of science and technology. Python is a powerful tool in data science as it can automate tasks and facilitate data analysis. One of the main reasons Python is a popular programming language is its extensive external libraries and packages which can introduce new functionalities, tailored to different applications, to the base version of Python. Installing all the external packages individually can be time-consuming and as such, we recommend Anaconda, an all-in-one installer which comes with the most popular external packages for Python.\nWe will teach Python using JupyterLab, a programming environment that runs in a web browser (JupyterLab will be installed by Anaconda automatically). For this to work you will need a reasonably up-to-date browser. The current versions of the Chrome, Safari, and Firefox browsers are all supported."
  },
  {
    "objectID": "install.html#python-setup-using-anaconda",
    "href": "install.html#python-setup-using-anaconda",
    "title": "Software installation instructions",
    "section": "",
    "text": "Python is a popular high-level programming language with applications in different fields of science and technology. Python is a powerful tool in data science as it can automate tasks and facilitate data analysis. One of the main reasons Python is a popular programming language is its extensive external libraries and packages which can introduce new functionalities, tailored to different applications, to the base version of Python. Installing all the external packages individually can be time-consuming and as such, we recommend Anaconda, an all-in-one installer which comes with the most popular external packages for Python.\nWe will teach Python using JupyterLab, a programming environment that runs in a web browser (JupyterLab will be installed by Anaconda automatically). For this to work you will need a reasonably up-to-date browser. The current versions of the Chrome, Safari, and Firefox browsers are all supported."
  },
  {
    "objectID": "install.html#installation",
    "href": "install.html#installation",
    "title": "Software installation instructions",
    "section": "Installation",
    "text": "Installation\n\nWindows users\n\nOpen this link.\nClick on the “Download” button. If you are not sure which version to choose, you probably want the 64-bit Graphical Installer Anaconda3-...-Windows-x86_64.exe.\n\n\n\n\n\n\n\nInstall Python 3 by running the Anaconda Installer:\n\n\n\n\nStep 1. Click on the “Next” button\n\n\n\n\n\nStep 2. Click on the “I Agree” button\n\n\n\n\n\nStep 3. Click on the “Next” button\n\n\n\n\n\nStep 4. Click on the “Next” button\n\n\n\n\n\nStep 5. Check “add Anaconda3 to my PATH environment variable” box and then click on “Install”\n\n\n\n\nmacOS users\n\nOpen this link.\nClick on the “Download” button which will then download the Anaconda Installer with Python 3 for macOS (you can either use the Graphical or the Command Line Installer).\nInstall Python 3 by running the Anaconda Installer using all the defaults.\n\n\n\nLinux users\n\nOpen this link.\nClick on the “Download” button and download the Anaconda Installer with Python 3 for Linux.\nOpen a terminal emulator and navigate to the directory where the executable is downloaded (e.g. cd ~/Downloads).\nType bash Anaconda3- then press Tab to autocomplete the full file name. The name of the file you just downloaded should appear.\nPress “Enter”. You will follow the text-only prompts. To move through the text, press the space bar. Type “yes” and press “Enter” to approve the license. Press “Enter” to approve the default location for the files. Type “yes” and press “Enter” to prepend Anaconda to your PATH (this makes the Anaconda distribution the default Python).\nClose the terminal window."
  },
  {
    "objectID": "install.html#testing-installation",
    "href": "install.html#testing-installation",
    "title": "Software installation instructions",
    "section": "Testing installation",
    "text": "Testing installation\nMake sure you can open JupyterLab in your browser: navigate to your terminal (“Anaconda Prompt” in Windows).\n\n\n\nIn Windows, look for “Anaconda Prompt”\n\n\nOnce you are in “Anaconda Prompt” (Windows), “Terminal” (macOS), or your usual terminal emulator (Linux), type jupyter lab and press “Enter”.\nIf you see a window similar to this screenshot in your browser, it means that you are good to go:"
  },
  {
    "objectID": "monday/index.html",
    "href": "monday/index.html",
    "title": "Programming fundamentals",
    "section": "",
    "text": "Time:\n10:30am–noon\nInstructor:\nMarie-Hélène Burle (Simon Fraser University)\nLive notes:\nFeel free to use the etherpad for this course to share notes or communicate among each other. It is entirely for you, so you can use it however you want.\nMaterial:\nSlides (this presentation may take a little time to load).\nTopic:\nAn introduction to the core concepts of programming languages."
  },
  {
    "objectID": "monday/index.html#programming-languages",
    "href": "monday/index.html#programming-languages",
    "title": "Programming fundamentals",
    "section": "",
    "text": "Time:\n10:30am–noon\nInstructor:\nMarie-Hélène Burle (Simon Fraser University)\nLive notes:\nFeel free to use the etherpad for this course to share notes or communicate among each other. It is entirely for you, so you can use it however you want.\nMaterial:\nSlides (this presentation may take a little time to load).\nTopic:\nAn introduction to the core concepts of programming languages."
  },
  {
    "objectID": "monday/index.html#jupyterlab-python",
    "href": "monday/index.html#jupyterlab-python",
    "title": "Programming fundamentals",
    "section": "JupyterLab & Python",
    "text": "JupyterLab & Python\n\nTime:\n1pm–2:30pm\nInstructor:\nTannia Chevez (ACENET)\nLive notes:\nEtherpad\nMaterial:\nDownload the Jupyter notebook for this afternoon:  Download \nYou will open this notebook on your computer and work in it.\nYou can see (but not edit) the content of the notebook here.\nAfter the end of today’s class, we will publish a completed notebook at the link above so that you don’t have to worry about missing something during the class: just focus on learning."
  },
  {
    "objectID": "thursday/index.html",
    "href": "thursday/index.html",
    "title": "Your turn!",
    "section": "",
    "text": "Time:\n9am–noon, 1pm–4pm\nLive notes:\nEtherpad\nTopic:\nToday, you will be working in teams on a project of your own. Your goal is to extract useful data from a website, either via API querying (if the option is available) or via web scraping (if your site has no API).\nIt would be fantastic if you could chose a website that contains data useful for your research or that is of interest to you. If you don’t have any idea however, we will provide a list of site suggestions.\nTry to pair up with one or more people having a similar interest.\nOf course, we will be with you all day to help!"
  },
  {
    "objectID": "tuesday/index.html",
    "href": "tuesday/index.html",
    "title": "Basics of Python",
    "section": "",
    "text": "Time:\n9am–noon\nInstructor:\nTannia Chevez (ACENET)\nLive notes:\nEtherpad\nMaterial:\nDownload the Jupyter notebook for this morning:  Download \nYou will open this notebook on your computer and work in it.\nYou can see (but not edit) the content of the notebook here.\nAfter the end of today’s class, we will publish a completed notebook at the link above so that you don’t have to worry about missing something during the class: just focus on learning."
  },
  {
    "objectID": "tuesday/index.html#dive-into-python",
    "href": "tuesday/index.html#dive-into-python",
    "title": "Basics of Python",
    "section": "",
    "text": "Time:\n9am–noon\nInstructor:\nTannia Chevez (ACENET)\nLive notes:\nEtherpad\nMaterial:\nDownload the Jupyter notebook for this morning:  Download \nYou will open this notebook on your computer and work in it.\nYou can see (but not edit) the content of the notebook here.\nAfter the end of today’s class, we will publish a completed notebook at the link above so that you don’t have to worry about missing something during the class: just focus on learning."
  },
  {
    "objectID": "tuesday/index.html#using-ai-to-write-python-code",
    "href": "tuesday/index.html#using-ai-to-write-python-code",
    "title": "Basics of Python",
    "section": "Using AI to write Python code",
    "text": "Using AI to write Python code\n\nTime:\n1pm–4pm\nInstructor:\nMarie-Hélène Burle (Simon Fraser University)\nLive notes:\nEtherpad\nMaterial:\nWebsite\nTopic:\nLLMs have become extremely useful as a programming aid.\nThey can:\n\nauto-complete code,\nexplain programming concepts,\nexplain code,\nwrite code,\ndebug code,\nwrite software tests,\nwrite entire programs, websites, and applications (vibe coding).\n\nLet’s have a first try at it: we will use an LLM to download a text from the internet and do some basic text analyses. In the process, we will learn new Python concepts."
  }
]